package com.github.fng.adventofcode2021.day17

import com.github.fng.adventofcode2021.ResourceUtils
import com.github.fng.adventofcode2021.day16.Day16.{LiteralPackage, Operator}
import com.github.fng.adventofcode2021.day17.Day17.{
  Point,
  Probe,
  TargetArea,
  TargetComputer,
  Velocity
}
import org.scalatest.funsuite.AnyFunSuite

class Day17Test extends AnyFunSuite {

  test("Day17 - Part 1 - example 1") {
    val input =
      ResourceUtils.getLinesFromResource("day17/reference-input.txt").head
    val targetArea = Day17.parseInput(input)

    assert(targetArea === TargetArea(Point(20, -10), Point(30, -5)))

    val step0 = TargetComputer.initialize(targetArea, Velocity(7, 2))

    assertString(
      step0.calculateTrajectory(),
      """Initial velocity: 7, 2
        |After Step: 7 <- PROBE IN TARGET AREA!!!!
        |max height: 3
        |.............#....#............
        |.......#..............#........
        |...............................
        |S........................#.....
        |...............................
        |...............................
        |...........................#...
        |...............................
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTPTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |""".stripMargin
    )

  }

  test("Day17 - Part 1 - example 2") {
    val input =
      ResourceUtils.getLinesFromResource("day17/reference-input.txt").head
    val targetArea = Day17.parseInput(input)
    val trajectory = TargetComputer
      .initialize(targetArea, Velocity(6, 3))
      .calculateTrajectory()
    assertString(
      trajectory,
      """Initial velocity: 6, 3
      |After Step: 9 <- PROBE IN TARGET AREA!!!!
      |max height: 6
      |...............#..#............
      |...........#........#..........
      |...............................
      |......#..............#.........
      |...............................
      |...............................
      |S....................#.........
      |...............................
      |...............................
      |...............................
      |......................#........
      |....................TTTTTTTTTTT
      |....................TTTTTTTTTTT
      |....................TTTTTTTTTTT
      |....................TTTTTTTTTTT
      |....................TTPTTTTTTTT
      |....................TTTTTTTTTTT
      |""".stripMargin
    )

  }

  test("Day17 - Part 1 - example 3") {
    val input =
      ResourceUtils.getLinesFromResource("day17/reference-input.txt").head
    val targetArea = Day17.parseInput(input)
    val trajectory = TargetComputer
      .initialize(targetArea, Velocity(9, 0))
      .calculateTrajectory()
    assertString(
      trajectory,
      """Initial velocity: 9, 0
        |After Step: 4 <- PROBE IN TARGET AREA!!!!
        |max height: 0
        |S........#.....................
        |.................#.............
        |...............................
        |........................#......
        |...............................
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTP
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |""".stripMargin
    )

  }

  test("Day17 - Part 1 - example 4") {
    val input =
      ResourceUtils.getLinesFromResource("day17/reference-input.txt").head
    val targetArea = Day17.parseInput(input)
    val trajectory = TargetComputer
      .initialize(targetArea, Velocity(17, -4))
      .calculateTrajectory()
    assertString(
      trajectory,
      """Initial velocity: 17, -4
        |After Step: 3
        |max height: -4
        |S................................................
        |.................................................
        |.................................................
        |.................................................
        |.................#...............................
        |....................TTTTTTTTTTT..................
        |....................TTTTTTTTTTT..................
        |....................TTTTTTTTTTT..................
        |....................TTTTTTTTTTT..................
        |....................TTTTTTTTTTT..#...............
        |....................TTTTTTTTTTT..................
        |.................................................
        |.................................................
        |.................................................
        |.................................................
        |................................................P
        |""".stripMargin
    )

  }

  test("Day17 - Part 1 - reference") {
    val input =
      ResourceUtils.getLinesFromResource("day17/reference-input.txt").head
    val targetArea = Day17.parseInput(input)
    val trajectory = TargetComputer.trajectoryWithHighestY(targetArea)
    assertString(
      trajectory,
      """Initial velocity: 5, 9
        |After Step: 20 <- PROBE IN TARGET AREA!!!!
        |max height: 45
        |.................#.............
        |................#.#............
        |...............................
        |................#.#............
        |...............................
        |...............................
        |...............#...#...........
        |...............................
        |...............................
        |...............................
        |...............#...#...........
        |...............................
        |...............................
        |...............................
        |...............................
        |..............#.....#..........
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |............#.......#..........
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |.........#...........#.........
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |.....#...............#.........
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |...............................
        |S.....................#........
        |...............................
        |...............................
        |...............................
        |...............................
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTTTTTTTTTT
        |....................TTPTTTTTTTT
        |""".stripMargin
    )

  }

  test("Day17 - Part 1 - exercise") {
    val input = ResourceUtils.getLinesFromResource("day17/input.txt").head
    val targetArea = Day17.parseInput(input)
    val trajectory = TargetComputer.trajectoryWithHighestY(targetArea)
    println(trajectory)
    assert(trajectory.initialVelocity === Velocity(21, 75))
    assert(trajectory.steps === 152)
    assert(trajectory.maxProbeHeight === 2850)

  }

  private def assertString(actual: Any, expected: String): Unit = {
    assert(
      actual.toString.replace("\r\n", "\n") ===
        expected.replace("\r\n", "\n").stripMargin
    )
  }

}
